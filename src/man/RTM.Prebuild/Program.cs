using System.Text;
using System.Text.RegularExpressions;

var file = File.ReadAllText("../../../inc/radiotap.h");

var builder = new StringBuilder();
builder.AppendLine(
    """
    // <auto-generated />
    
    global using S1 = sbyte;
    global using S2 = short;
    global using S4 = int;
    global using S8 = long;
    
    global using U1 = byte;
    global using U2 = ushort;
    global using U4 = uint;
    global using U8 = ulong;
    
    global using size_t = nuint;
    
    using System;
    using System.Runtime.InteropServices;
    
    namespace RTM;
    
    """);
var tmp = new StringBuilder();
foreach (Match match in StructRegex().Matches(file))
{
    var fields = match.Groups["fields"];
    var tag    = match.Groups["tag"];

    tmp.Clear();
    foreach (var s in fields.Value.Split('\n', StringSplitOptions.RemoveEmptyEntries))
    {
        var line = s.TrimStart();
        tmp.Append("    ");
        if (line.Contains('['))
            tmp.Append("fixed ");
        tmp.AppendLine(line);
    }
    
    builder.AppendLine(
        $$"""
          [Serializable]
          [StructLayout(LayoutKind.Sequential, Pack = 1)]
          public unsafe struct {{tag}}
          {
          {{tmp}}}
          
          """);
}

File.WriteAllText("../RTM/Defs.g.cs", builder.ToString(), Encoding.UTF8);

internal partial class Program
{
    [GeneratedRegex(@"typedef struct\s+{(?<fields>[^}]+)}\s*(__field__)?(__pack__)?\s*(?<tag>[^;]+)")]
    private static partial Regex StructRegex();
}